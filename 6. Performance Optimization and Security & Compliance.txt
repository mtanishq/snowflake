-- 1. Optimizing Query Performance with Clustering Keys

-- A. Clustering by customer_id
ALTER TABLE transactions_raw
CLUSTER BY (customer_id);

-- B. Clustering by amount
ALTER TABLE transactions_raw
CLUSTER BY (amount);

-- C. Clustering by transaction_type and channel
ALTER TABLE transactions_raw
CLUSTER BY (transaction_type, channel);

------------------------------------------------------------------------------------------------------

-- 2. Implementing Materialized Views for Frequently Accessed Data
CREATE OR REPLACE MATERIALIZED VIEW mv_customer_summary AS
SELECT 
    customer_id, 
    COUNT(transaction_id) AS total_transactions, 
    SUM(amount) AS total_spent, 
    AVG(amount) AS avg_spent
FROM transactions_raw
GROUP BY customer_id;

------------------------------------------------------------------------------------------------------

-- 3. Strategy for efficiently managing single-cluster warehouses
--- A. Setting auto-suspend after 5 minutes of inactivity
ALTER WAREHOUSE COMPUTE_WH
SET AUTO_SUSPEND = 300;

--- B. Enabling auto-resume to automatically start the warehouse when a query is run
ALTER WAREHOUSE COMPUTE_WH
SET AUTO_RESUME = TRUE;

--- C. Resize the warehouse based on your workload requirements
ALTER WAREHOUSE COMPUTE_WH
SET WAREHOUSE_SIZE = 'MEDIUM';

--- D. Use resource monitors to track and control warehouse usage.
CREATE OR REPLACE RESOURCE MONITOR monitor_warehouse_usage
WITH CREDIT_QUOTA = 500  -- Set a credit limit
TRIGGERS ON 80 PERCENT DO NOTIFY  -- Notify when 80% of credits are used
TRIGGERS ON 100 PERCENT DO SUSPEND;  -- Suspend warehouses when 100% of credits are used

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

-- 4. Security and Compliance:

--- A. Implement row-level security and column-level encryption in Snowflake
-- Create a Row Access Policy to restrict access based on user role
CREATE OR REPLACE ROW ACCESS POLICY policy_customer_data
AS
  CASE
    WHEN CURRENT_ROLE() = 'HR_ROLE' AND city = 'New York' THEN TRUE
    WHEN CURRENT_ROLE() = 'FINANCE_ROLE' AND income_bracket = 'High' THEN TRUE
    ELSE FALSE
  END;

-- Apply the policy to the customers_raw table
ALTER TABLE customers_raw
ADD ROW ACCESS POLICY policy_customer_data ON SELECT;


-- Column level data masking policy
-- Create a masking policy for phone numbers
CREATE OR REPLACE MASKING POLICY phone_number_masking_policy
AS (val STRING) 
RETURNS STRING ->
CASE 
    WHEN CURRENT_ROLE() IN ('HR_ROLE', 'FINANCE_ROLE') THEN val
    ELSE 'XXX-XXX-XXXX' -- Masked value
END;


-- Apply the masking policy to the phone_number column
ALTER TABLE customers_raw
MODIFY COLUMN phone_number SET MASKING POLICY phone_number_masking_policy;

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

--- B. Creating secure views for data sharing across departments
-- Create a secure view for the Finance department with limited columns
CREATE OR REPLACE SECURE VIEW finance_customer_view AS
SELECT 
    customer_id,
    first_name,
    last_name,
    income_bracket,
    current_balance
FROM customers_raw
WHERE CURRENT_ROLE() = 'FINANCE_ROLE';

-- Create a secure view for the HR department with different limited columns
CREATE OR REPLACE SECURE VIEW hr_customer_view AS
SELECT 
    customer_id,
    first_name,
    last_name,
    date_of_birth,
    address,
    city,
    country
FROM customers_raw
WHERE CURRENT_ROLE() = 'HR_ROLE';



